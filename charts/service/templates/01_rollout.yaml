{{- if not .Values.name }}
  {{ fail "You must provide a `service.name` in values.yaml" }}
{{- end }}
{{- /* */}}
{{ $repo := .Values.repo | default .Values.default.repo }}
{{- /* */}}
{{ $seenMainServiceBefore := 0 }}
{{- /* */}}
{{- range $k, $environment := .Values.environments }}
{{- /* Deploy production environment only when deployProduction override isn't set */}}
{{ $deployProduction := $.Values.overrides.deployProduction }}
{{- if or (not $environment.production) $deployProduction }}
{{ $version := $environment.version | default $.Values.default.version }}
{{- if and $.Values.overrides.version }}
  {{ $version = $.Values.overrides.version }}
{{- end }}
{{- /* */}}
{{- if not $environment.name }}
  {{- if not $environment.production }}
    {{ fail "You must provide a `service.environments[].name` for non-production environments in values.yaml" }}
  {{- end }}
{{- end }}
{{- /* */}}
{{ $cpuLimit := $.Values.default.cpuLimit }}
{{ $memoryLimit := $.Values.default.memoryLimit }}
{{- /* */}}
{{ $requestedCpu := "" }}
{{ $requestedMemory := "" }}
{{- /* */}}
{{- if $environment.resources }}
  {{- if $environment.resources.requests }}
  {{ $requestedMemory = $environment.resources.requests.memory }}
  {{ $requestedCpu = $environment.resources.requests.cpu }}
  {{- end }}
  {{- if $environment.resources.limits }}
    {{ $memoryLimit = $environment.resources.limits.memory }}
    {{ $cpuLimit = $environment.resources.limits.cpu }}
  {{- end }}
{{- end }}
{{- /* */}}
{{ $name := printf "%s--%s" $environment.name $.Values.name }}
{{- if and $environment.production (not $environment.name) }}
  {{- if $seenMainServiceBefore }}
    {{ fail "You may only have ONE main production environment" }}
  {{- else }}
    {{ $seenMainServiceBefore = 1 }}
  {{- end }}
  {{ $name = $.Values.name }}
{{- end }}
{{- if and $.Values.overrides.environmentName }}
  {{ $name = printf "%s-%s--%s" $.Values.overrides.environmentName ($environment.name | default "default") $.Values.name }}
{{- end }}
{{- /* */}}
{{ $namespace := $.Values.global.stagingNamespace }}
{{- if $environment.production }}
  {{ $namespace = $.Values.global.prodNamespace }}
{{- end }}
{{- /* */}}
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: {{ $name }}
  namespace: {{ $namespace }}
  labels:
    app.kubernetes.io/name: {{ $name }}
    circuit/service-name: {{ $.Values.name }}
spec:
  strategy:
    canary:
      maxUnavailable: "30%"
      maxSurge: "50%"
      canaryService: {{ printf "%s-canary" $name }}
      stableService: {{ printf "%s-stable" $name }}
      trafficRouting:
        istio:
          virtualServices:
          - name: {{ $name }}
            routes:
            - primary
      {{- if $environment.rolloutAnalysis }}
      analysis:
        {{- if $environment.rolloutAnalysis.custom }}
        templates:
        - templateName: {{ $name }}
        startingStep: 2
        {{- else }}
        templates:
        - templateName: success-rate
        startingStep: 2
        args:
        - name: service-name
          value: {{ printf "%s-canary" $name }}
        - name: success-condition
          value: "{{ $environment.rolloutAnalysis.successCondition }}"
        {{- end }}
      {{- end }}
      steps:
      {{- if $environment.rolloutStrategy}}
{{ $environment.rolloutStrategy | toYaml | indent 6}}
      {{- else }}
      - setWeight: 1
      - pause: 
          duration: 30s
      - setWeight: 5
      - pause: 
          duration: 30s
      - setWeight: 10
      - pause: 
          duration: 30s
      - setWeight: 20
      - pause: 
          duration: 30s
      - setWeight: 50
      - pause: 
          duration: 30s
      - setWeight: 100
      {{- end }}
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ $name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ $name }}
        istio-injection: enabled
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        {{- if $environment.terminationGracePeriodSeconds }}
        proxy.istio.io/config: {{ printf 
          "{\"proxyMetadata\":{\"EXIT_ON_ZERO_ACTIVE_CONNECTIONS\":\"true\"}, \"terminationDrainDuration\":\"%ds\"}"
          (int $environment.terminationGracePeriodSeconds) 
          | quote }}
        {{- end }}
    spec:
      {{- if $environment.gcpServiceAccount }}
      serviceAccountName: {{ $name }}
      nodeSelector:
        iam.gke.io/gke-metadata-server-enabled: "true"
      {{- else }}
      serviceAccountName: apps-sa
      {{- end }}
      {{- if $environment.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ $environment.terminationGracePeriodSeconds }}
      {{- end }}
      containers:
        - name: {{ $name }}
          {{- $imageName := $.Values.imageName | default $.Values.name }}
          image: {{ printf "%s/%s:%s" $repo $imageName $version }}
          ports:
          - name: http
            containerPort: {{ $environment.port | default $.Values.default.port }}
          imagePullPolicy: {{ $environment.imagePullPolicy | default $.Values.default.imagePullPolicy }}
          {{- if $environment.command }}
          command:
          {{- range $key, $part := $environment.command }}
          - {{ $part }}
          {{- end }}
          {{- end }}
          resources: 
            {{- if $requestedCpu }}
            requests:
              cpu: {{ $requestedCpu }}
              memory: {{ $requestedMemory }}
            {{- end }}
            limits:
              cpu: {{ $cpuLimit }}
              memory: {{ $memoryLimit }}
          {{- if $environment.healthcheck }}
          {{- if $environment.healthcheck.enabled | default false }}
          livenessProbe:
            httpGet:
              path: {{ ($environment.healthcheck.liveness).path | default $.Values.default.healthcheck.liveness.path }}
              port: http
            initialDelaySeconds: {{ ($environment.healthcheck.liveness).delay | default $.Values.default.healthcheck.liveness.delay }}
            periodSeconds: {{ ($environment.healthcheck.liveness).interval | default $.Values.default.healthcheck.liveness.interval }}
            failureThreshold: {{ ($environment.healthcheck.liveness).failure | default $.Values.default.healthcheck.liveness.failure }}
            timeoutSeconds: {{ ($environment.healthcheck.liveness).timeout | default $.Values.default.healthcheck.liveness.timeout }}
            successThreshold: {{ ($environment.healthcheck.liveness).success | default $.Values.default.healthcheck.liveness.success }}
          readinessProbe:
            httpGet:
              path: {{ ($environment.healthcheck.readiness).path | default $.Values.default.healthcheck.readiness.path }}
              port: http
            initialDelaySeconds: {{ ($environment.healthcheck.readiness).delay | default $.Values.default.healthcheck.readiness.delay }}
            periodSeconds: {{ ($environment.healthcheck.readiness).interval | default $.Values.default.healthcheck.readiness.interval }}
            failureThreshold: {{ ($environment.healthcheck.readiness).failure | default $.Values.default.healthcheck.readiness.failure }}
            timeoutSeconds: {{ ($environment.healthcheck.readiness).timeout | default $.Values.default.healthcheck.readiness.timeout }}
            successThreshold: {{ ($environment.healthcheck.readiness).success | default $.Values.default.healthcheck.readiness.success }}
          {{- end }}
          {{- end }}
          {{- if $environment.env }}
          {{- /* */}}
          env:
          {{- range $key, $value := $environment.env}}
            {{- if kindIs "map" $value }}
            {{- $secret := $value.fromSecret }}
            {{- if or (not (hasKey $secret "enabled")) ($secret.enabled) }}
          - name: {{ $key | quote }}
            valueFrom: 
              secretKeyRef:
                name: {{ $name | quote }}
                key: {{ include "secrets.key.env" (dict "key" $key "secret" $secret) }}
            {{- end }}
            {{- else}}
          - name: {{ $key | quote }}
            value: {{ $value | quote }}
            {{- end }}
          {{- end }}
          {{- /* */}}
          {{- end }}
      {{- if $environment.volumes }}
          volumeMounts:
          {{- if $environment.volumes.secrets }}
            {{- range $i, $secret := $environment.volumes.secrets }}
          - mountPath: {{ $secret.path }}
            readOnly: true
            name: {{ $secret.name }}
            {{- end }}
          {{- end }}
      volumes:
      {{- if $environment.volumes.secrets }}
      {{- range $i, $value := $environment.volumes.secrets }}
      {{- if kindIs "map" $value.fromRemote }}
      {{- $secret := $value.fromRemote }}
      - name: {{ $value.name | quote }}
        secret:
          secretName: {{ $name | quote }}
          items:
          - key: {{ include "secrets.key.mount" (dict "key" $value.name "secret" $secret) }}
            path: {{ $value.file | quote }}
      {{- else }}
      - name: {{ $value.name | quote }}
        secret:
          secretName: {{ $value.name | quote }}
          items:
            {{- range $j, $item := $value.items }}
          - key: {{ $item.key | quote }}
            path: {{ $item.path | quote }}
            {{- end }}
      {{- end }}
      {{- end }}
      {{- end }}
      {{- /* */}}
      {{- end }}
---
{{- end }}
{{- end }}
