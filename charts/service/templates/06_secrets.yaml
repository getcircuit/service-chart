{{- range $k, $environment := .Values.environments }}

{{ $secretName := printf "%s--%s" $environment.name $.Values.name }}
{{- if and $environment.production (not $environment.name) }}
  {{ $secretName = $.Values.name }}
{{- end }}

{{ $namespace := $.Values.global.stagingNamespace }}
{{- if $environment.production }}
  {{ $namespace = $.Values.global.prodNamespace }}
{{- end }}

{{ $shouldRender := false }}
{{- range $key, $value := $environment.env}}
  {{- if kindIs "map" $value}}
    {{ $shouldRender = true }}
  {{end}}
{{end}}
{{- if $environment.volumes }}
{{- if $environment.volumes.secrets }}
  {{- range $j, $value := $environment.volumes.secrets }}
    {{- if kindIs "map" $value.fromRemote }}
      {{ $shouldRender = true }}
    {{end}}
  {{end}}
{{end}}
{{end}}

{{- if $shouldRender }}
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ $secretName }}
  namespace: {{ $namespace }}
spec:
  refreshInterval: 1h
  secretStoreRef:
    kind: SecretStore
    name: gcpsm-secret-store
  target: {}
  data:
  {{- range $key, $value := $environment.env}}
    {{- if kindIs "map" $value}}
    {{- $secret := $value.fromSecret }}
  - secretKey: {{ printf "%s-%s" $key (join "-version-env-" (list $secret.name $secret.version)) }}
    remoteRef: 
      key: {{ $secret.name | quote }}
      version: {{ $secret.version | quote }}
    {{- end}}
  {{- end }}

  {{- if $environment.volumes }}
  {{- if $environment.volumes.secrets }}
  {{- range $j, $value := $environment.volumes.secrets }}
    {{- if kindIs "map" $value.fromRemote }}
    {{- $secret := $value.fromRemote }}
  - secretKey: {{ printf "%s-%s" $value.name (join "-version-mount-" (list $secret.name $secret.version)) }}
    remoteRef: 
      key: {{ $secret.name | quote }}
      version: {{ $secret.version | quote }}
    {{- end }}
  {{- end }}
  {{- end }}
  {{- end }}
---
{{- end }}
{{- end }}
