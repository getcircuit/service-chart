{{- if not .Values.name }}
  {{ fail "You must provide a `service.name` in values.yaml" }}
{{- end }}
{{- /* */}}
{{ $repo := .Values.repo | default .Values.default.repo }}
{{ $namespace := .Values.namespace | default .Values.default.namespace }}
{{- /* */}}
{{ $seenProdBefore := 0 }}
{{- /* */}}
{{- range $k, $environment := .Values.environments }}
{{ $version := $environment.version | default $.Values.default.version }}
{{- /* */}}
{{- if not $environment.name }}
  {{- if not $environment.production }}
    {{ fail "You must provide a `service.environments[].name` for non-production environments in values.yaml" }}
  {{- end }}
{{- end }}
{{- /* */}}
{{ $cpuLimit := $.Values.default.cpuLimit }}
{{ $memoryLimit := $.Values.default.memoryLimit }}
{{- /* */}}
{{ $requestedCpu := "" }}
{{ $requestedMemory := "" }}
{{- /* */}}
{{- if $environment.resources }}
  {{- if $environment.resources.requests }}
  {{ $requestedMemory = $environment.resources.requests.memory }}
  {{ $requestedCpu = $environment.resources.requests.cpu }}
  {{- end }}
  {{- if $environment.resources.limits }}
    {{ $memoryLimit = $environment.resources.limits.memory }}
    {{ $cpuLimit = $environment.resources.limits.cpu }}
  {{- end }}
{{- end }}
{{- /* */}}
{{ $name := printf "%s--%s" $environment.name $.Values.name }}
{{- /* */}}
{{ if $environment.production }}
  {{ if $seenProdBefore }}
    {{ fail "You may only have ONE production environment" }}
  {{ else }}
  {{ $seenProdBefore = 1 }}
  {{- end }}
  {{ $name = $.Values.name }}
{{- end }}
{{- /* */}}
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: {{ $name }}
  namespace: {{ $namespace }}
  labels:
    app.kubernetes.io/name: {{ $name }}
    circuit/service-name: {{ $.Values.name }}
spec:
  strategy:
    canary:
      canaryService: {{ printf "%s-canary" $name }}
      stableService: {{ printf "%s-stable" $name }}
      trafficRouting:
        istio:
          virtualServices:
          - name: {{ $name }}
      steps:
      {{- if $environment.rolloutStrategy}}
{{ $environment.rolloutStrategy | toYaml | indent 6}}
      {{- else }}
      - setWeight: 1
      - pause: 
          duration: 30s
      - setWeight: 2
      - pause: 
          duration: 30s
      - setWeight: 3
      - pause: 
          duration: 30s
      - setWeight: 5
      - pause: 
          duration: 30s
      - setWeight: 8
      - pause: 
          duration: 30s
      - setWeight: 13
      - pause: 
          duration: 30s
      - setWeight: 21
      - pause: 
          duration: 30s
      - setWeight: 34
      - pause: 
          duration: 30s
      - setWeight: 55
      - pause: 
          duration: 30s
      - setWeight: 89
      - pause: 
          duration: 30s
      - setWeight: 100
      {{- end }}
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ $name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ $name }}
        istio-injection: enabled
    spec:
      containers:
        - name: {{ $name }}
          {{- $imageName := $.Values.imageName | default $.Values.name }}
          image: {{ printf "%s/%s:%s" $repo $imageName $version }}
          ports:
          - name: http
            containerPort: {{ $environment.port | default $.Values.default.port }}
          imagePullPolicy: IfNotPresent
          resources: 
            {{- if $requestedCpu }}
            requests:
              cpu: {{ $requestedCpu }}
              memory: {{ $requestedMemory }}
            {{- end }}
            limits:
              cpu: {{ $cpuLimit }}
              memory: {{ $memoryLimit }}
          {{- if $environment.healthcheck }}
          {{- if $environment.healthcheck.enabled | default false }}
          livenessProbe:
            httpGet:
              path: {{ $environment.healthcheck.liveness.path | default $.Values.default.healthcheck.liveness.path }}
              port: http
            initialDelaySeconds: {{ $environment.healthcheck.liveness.delay | default $.Values.default.healthcheck.liveness.path }}
            periodSeconds: {{ $environment.healthcheck.liveness.interval | default $.Values.default.healthcheck.liveness.interval }}
            failureThreshold: {{ $environment.healthcheck.liveness.failure | default $.Values.default.healthcheck.liveness.failure }}
            timeoutSeconds: {{ $environment.healthcheck.liveness.timeout | default $.Values.default.healthcheck.liveness.timeout }}
          readinessProbe:
            httpGet:
              path: {{ $environment.healthcheck.readiness.path | default $.Values.default.healthcheck.readiness.path }}
              port: http
            initialDelaySeconds: {{ $environment.healthcheck.readiness.delay | default $.Values.default.healthcheck.readiness.path }}
            periodSeconds: {{ $environment.healthcheck.readiness.interval | default $.Values.default.healthcheck.readiness.interval }}
            failureThreshold: {{ $environment.healthcheck.readiness.failure | default $.Values.default.healthcheck.readiness.failure }}
            timeoutSeconds: {{ $environment.healthcheck.readiness.timeout | default $.Values.default.healthcheck.readiness.timeout }}
          {{- end }}
          {{- end }}
          {{- if $environment.env }}
          {{- /* */}}
          env:
          {{- range $key, $value := $environment.env}}
          - name: {{ $key | quote }}
            value: {{ $value | quote }}
          {{- end }}
          {{- /* */}}
          {{- end }}
      {{- if or $environment.secret $environment.config }}
          volumeMounts:
          {{- if $environment.config }}
          - mountPath: /etc/config
            readOnly: true
            name: config
          {{- end }}
          {{- if $environment.secret }}
          - mountPath: /etc/secret
            readOnly: true
            name: secret
          {{- end }}
      volumes:
      {{- $envName := $environment.name | default "prod" }}
      {{- /* */}}
      {{- if $environment.secret }}
      {{- $secretName := printf "%s--%s--%s" $envName $.Values.name $environment.secret.name }}
      - name: secret
        secret:
          secretName: {{ $secretName }}
          items:
          - key: {{ $environment.secret.name }} 
            path: {{ $environment.secret.name }}
      {{- end }}
      {{- /* */}}
      {{- if $environment.config }}
      {{- $configName := printf "%s--%s--%s" $envName $.Values.name $environment.config.name }}
      - name: config
        configMap:
          name: {{ $configName }}
          items:
            - key: {{ printf "%s.yaml" $environment.config.name }} 
              path: {{ printf "%s.yaml" $environment.config.name }} 
      {{- end }}
      {{- /* */}}
      {{- end }}
---
{{- end }}